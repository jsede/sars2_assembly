#!/bin/bash
#PBS -P viromics
#PBS -N assemble_SARS2
#PBS -l select=1:ncpus=32:mem=120GB
#PBS -l walltime=12:00:00
#PBS -j oe
#PBS -M js.eden@sydney.edu.au
#PBS -m bea
#PBS -o assemble_SARS2.log

## 	Author: John-Sebastian eden
##	Contact: js.eden@sydney.edu.au
## 	Date: August 2020
##	Version: v1.1 with WGS primer clipping
##	Comments: The WGS primer clipping protocol is mostly recommended when coverage is even

#set working directory
wrk=/project/viromics/RCPA

#set RunID (input files should be placed in folder with this name)
run=QAP

#define project folder
prj=$wrk/$run

#set database folder
db=/project/shared/db/virus_assembly

#set virus for filtering
virus=SARS2
blast="$virus"_ref

#set compute resources where m=GB t=CPU
m=120
t=32

#change into project folder
cd $prj

#quality trim reads with bbduk/37.98
module load bbmap/37.98 samtools/1.6
while read i; do
bbduk.sh -Xmx"$m"g threads="$t" in=$prj/1_reads/"$i"_1.fastq.gz in2=$prj/1_reads/"$i"_2.fastq.gz out=stdout.fq ref=adapters ktrim=r k=17 mink=3 | bbduk.sh -Xmx"$m"g threads="$t" interleaved=true in=stdin.fq out=$prj/1_reads/"$i"_trim_1.fastq.gz out2=$prj/1_reads/"$i"_trim_2.fastq.gz minlen=50 qtrim=rl trimq=20 entropy=0.7
done < $prj/IDs.list

#normalise read coverage for denovo assembly
while read i; do
bbnorm.sh -Xmx"$m"g threads="$t" in=$prj/1_reads/"$i"_trim_1.fastq.gz in2=$prj/1_reads/"$i"_trim_2.fastq.gz out=$prj/1_reads/"$i"_trim_norm_1.fastq.gz out2=$prj/1_reads/"$i"_trim_norm_2.fastq.gz target=100;
done < $prj/IDs.list

#clip WGS primers from ends of reads with cutadapt/1.8.3 and python/2.7.13
module load cutadapt/1.8.3 python/2.7.13
while read i; do
cutadapt -a file:$db/primers/"$virus".primers.clips.A.fa -A file:$db/primers/"$virus".primers.clips.A.fa -o $prj/1_reads/"$i"_trim_temp1_1.fastq.gz -p $prj/1_reads/"$i"_trim_temp1_2.fastq.gz $prj/1_reads/"$i"_trim_1.fastq.gz $prj/1_reads/"$i"_trim_2.fastq.gz
cutadapt -g file:$db/primers/"$virus".primers.clips.B.fa -G file:$db/primers/"$virus".primers.clips.B.fa -o $prj/1_reads/"$i"_trim_temp2_1.fastq.gz -p $prj/1_reads/"$i"_trim_temp2_2.fastq.gz $prj/1_reads/"$i"_trim_temp1_1.fastq.gz $prj/1_reads/"$i"_trim_temp1_2.fastq.gz
bbduk.sh -Xmx"$m"g threads="$t" in=$prj/1_reads/"$i"_trim_temp2_1.fastq.gz in2=$prj/1_reads/"$i"_trim_temp2_2.fastq.gz out=$prj/1_reads/"$i"_trim_clip_1.fastq.gz out2=$prj/1_reads/"$i"_trim_clip_2.fastq.gz minlen=50
rm $prj/1_reads/"$i"_trim_temp*
done < $prj/IDs.list

#create folder for reference mapping
mkdir $prj/2_ref_map

#map trimmed read to reference genomes
while read i; do
bbmap.sh -Xmx"$m"g threads="$t" in=$prj/1_reads/"$i"_trim_clip_1.fastq.gz in2=$prj/1_reads/"$i"_trim_clip_2.fastq.gz outm=$prj/2_ref_map/"$i".ref_mapped.bam ref=$db/fasta/"$virus"_ref.fa;
samtools sort -@ "$t" -o $prj/2_ref_map/"$i".ref_mapped.sorted.bam $prj/2_ref_map/"$i".ref_mapped.bam
done < $prj/IDs.list

#cleanup files
while read i; do
rm $prj/2_ref_map/"$i".ref_mapped.bam
done < $prj/IDs.list

#generate coverage maps
module load qualimap/2.2.1
cd $prj/2_ref_map
while read i; do
qualimap bamqc -bam "$i".ref_mapped.sorted.bam  -outformat PDF -outfile "$i".ref_mapped.coverage.pdf --java-mem-size="$m"G
done < $prj/IDs.list
cd $prj

#cleanup files
while read i; do
mv $prj/2_ref_map/"$i".ref_mapped.sorted_stats/"$i".ref_mapped.coverage.pdf $prj/2_ref_map/
rm -r $prj/2_ref_map/"$i".ref_mapped.sorted_stats
done < $prj/IDs.list

#create folder for de novo assembly
mkdir $prj/3_contigs

#denovo assemble trimmed reads with megahit/1.2.9 and rename output contigs with library name
module load megahit/1.1.3
while read i; do
megahit -t "$t" -1 $prj/1_reads/"$i"_trim_norm_1.fastq.gz -2 $prj/1_reads/"$i"_trim_norm_2.fastq.gz -o $prj/3_contigs/megahit_"$i" --out-prefix "$i" --min-contig-len 500;
sed "s/>k/>Draft_"$i"_k/g" $prj/3_contigs/megahit_"$i"/"$i".contigs.fa > $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.fa;
done < $prj/IDs.list

#export denovo assembly contig stats
while read i; do
grep ">" $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.fa | cut -d ">" -f2 | tr ' ' '\t' | sed 's/flag\=//g' | sed 's/multi\=//g' | sed 's/len\=//g' > $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.stats
done < $prj/IDs.list

#extract high coverage denovo assembly contigs
module load seqtk/1.3
while read i; do
awk -F$'\t' '{OFS=FS}{if ($3>50) print $1}' $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.stats > $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.hicov.list
seqtk subseq $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.fa $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.hicov.list > $prj/3_contigs/megahit_"$i"/"$i".contigs.megahit.hicov.fa
done < $prj/IDs.list

#create folder for blasting
mkdir $prj/4_filter

#combine denovo contigs into single file
cat $prj/3_contigs/megahit_*/*.contigs.megahit.hicov.fa > $prj/4_filter/all_denovo.contigs.megahit.hicov.fasta

#blast to local SARS2 database
module load blast+/2.9.0
export BLASTDB=$db/blast
blastn -query $prj/4_filter/all_denovo.contigs.megahit.hicov.fasta -db "$blast" -evalue 1E-10 -num_threads "$t" -out $prj/4_filter/all_denovo.contigs.megahit.hicov.blastn_"$virus".txt -outfmt "6 qseqid qlen stitle sstart send pident length evalue sstrand"

#get top virus blast results for each contig
awk -F$'\t' '!seen[$1]++' $prj/4_filter/all_denovo.contigs.megahit.hicov.blastn_"$virus".txt > $prj/4_filter/all_denovo.contigs.megahit.hicov.blastn_"$virus".top.txt

#take column containing contig names
cut -f1 $prj/4_filter/all_denovo.contigs.megahit.hicov.blastn_"$virus".top.txt > $prj/4_filter/"$virus"_draft_genomes."$run".list 

#retrieve sequences
seqtk subseq $prj/4_filter/all_denovo.contigs.megahit.hicov.fasta $prj/4_filter/"$virus"_draft_genomes."$run".list > $prj/4_filter/"$virus"_draft_genomes."$run".fa

#align to reference
module load mafft/7.402
mafft --thread $t --reorder --adjustdirection --maxiterate 10 --add $prj/4_filter/"$virus"_draft_genomes."$run".fa $db/fasta/"$virus"_ref.fa > $prj/4_filter/"$virus"_draft_genomes."$run".ref_aligned.fa

#unalign draft genome alignment
sed '/^>/! s/\-//g' $prj/4_filter/"$virus"_draft_genomes."$run".ref_aligned.fa | sed 's/_R_//g' | awk '!/^>/ { printf "%s", $0; n = "\n" } /^>/ { print n $0; n = "" } END { printf "%s", n }' > $prj/4_filter/"$virus"_draft_genomes."$run".ref_unaligned.fa

#retrieve draft denovo genomes
seqtk subseq $prj/4_filter/"$virus"_draft_genomes."$run".ref_unaligned.fa $prj/4_filter/"$virus"_draft_genomes."$run".list > $prj/4_filter/"$virus"_draft_genomes."$run".ref_unaligned.reoriented.fa

#create folder for blasting
mkdir $prj/5_remap

#retrieve individual draft sequences for mapping
while read i; do
grep -A1 ">Draft_${i}_" $prj/4_filter/"$virus"_draft_genomes."$run".ref_unaligned.reoriented.fa > $prj/5_remap/"$i".draft.fa
done < $prj/IDs.list

#map trimmed reads to draft genome
while read i; do
bbmap.sh -Xmx"$m"g threads="$t" maxindel=200 minid=0.98 in=$prj/1_reads/"$i"_trim_clip_1.fastq.gz in2=$prj/1_reads/"$i"_trim_clip_2.fastq.gz outm=$prj/5_remap/"$i".remapped.bam ref=$prj/5_remap/"$i".draft.fa
samtools sort -@ "$t" -o $prj/5_remap/"$i".remapped.sorted.bam $prj/5_remap/"$i".remapped.bam
done < $prj/IDs.list

#cleanup files
while read i; do
rm $prj/5_remap/"$i".remapped.bam
done < $prj/IDs.list

